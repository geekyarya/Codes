class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = findmax(piles);
        int ans = Integer.MAX_VALUE;
        int thrs = 0;
        while (low <= high) {
            int mid = (low + high) / 2;
            thrs = calculateHours(piles, mid);
            if (thrs <= h) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    public int calculateHours(int[] arr, int hourly) {
        int totalhrs = 0;
        for (int i = 0; i < arr.length; i++) {
            totalhrs +=  Math.ceil((double)(arr[i]) / (double)hourly);
        }
        return totalhrs;
    }

    int findmax(int[] arr) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
        }
        return max;
    }
}
