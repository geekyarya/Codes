/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {

        if(root==null)
        return null;

        List<Integer> list=new ArrayList<>();
        inorder(root,list);
        list.remove(Integer.valueOf(key));
        Collections.sort(list);
        return createBST(list,0,list.size()-1);
    }

    public TreeNode createBST(List<Integer> inpl,int low,int high)
    {
        if(low>high)
        return null;

        int mid=(low+high)/2;

        TreeNode root=new TreeNode(inpl.get(mid));

        root.left=createBST(inpl,low,mid-1);
        root.right=createBST(inpl,mid+1,high);

        return root;
    }

    public List<Integer> inorder(TreeNode node,List<Integer> res)
    {
        if(node==null)
        return null;

        inorder(node.left,res);
        res.add(node.val);
        inorder(node.right,res);

        return res;
    }
}
