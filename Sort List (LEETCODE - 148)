/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        
        if(head==null || head.next==null)
        return head;

        ListNode mid=middle(head);
        ListNode left=sortList(head);
        ListNode right=sortList(mid);

        return merge(left,right);
    }

    public ListNode middle(ListNode head)
    {
       if(head==null || head.next==null)
        return head;

        ListNode slow=head;
        ListNode fast=head.next;
        
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode mid=slow.next;
        slow.next=null;
        return mid;
    }

    public ListNode merge(ListNode list1, ListNode list2) {
        ListNode dummy=new ListNode();
        ListNode ptr=dummy;

        if(list1==null)
        return list2;

        if(list2==null)
        return list1;

        while(list1!=null && list2!=null)
        {
            if(list1.val<list2.val)
            {
                ptr.next=list1;
                ptr=ptr.next;
                list1=list1.next;
            }
            else
            {
                ptr.next=list2;
                ptr=ptr.next;
                list2=list2.next;
            }
        }

            while(list1!=null)
            {
                ptr.next=list1;
                ptr=ptr.next;
                list1=list1.next;
            }

            while(list2!=null)
            {
                ptr.next=list2;
                ptr=ptr.next;
                list2=list2.next;
            }
        return dummy.next;           
    }
}
















// class Solution {
//     public ListNode sortList(ListNode head) {
//         if (head == null || head.next == null) {
//             return head;
//         }
//         ListNode mid = get_mid(head);
//         ListNode left = sortList(head);
//         ListNode right = sortList(mid);

//         return mergeTwoLists(left, right);
//     }

//     public ListNode get_mid(ListNode head) {
//         ListNode midPrev = null;
//         while (head != null && head.next != null) {
//             midPrev = (midPrev == null) ? head : midPrev.next;
//             head = head.next.next;
//         }
//         ListNode mid = midPrev.next;
//         midPrev.next = null;
//         return mid;
//     }

//     public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
//         ListNode dummyhead = new ListNode();
//         ListNode tail = dummyhead;
//         while(list1 != null && list2 != null){
//             if(list1.val < list2.val){
//                 tail.next = list1;
//                 list1 = list1.next;
//                 tail = tail.next;
//             }else {
//                 tail.next = list2;
//                 list2 = list2.next;
//                 tail = tail.next;
//             }
//         }
//         tail.next = (list1 != null) ? list1 : list2;
//         return dummyhead.next;
//     }
// }
