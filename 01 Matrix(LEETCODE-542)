class Node
{
    int first;
    int second;
    int third;
    
    public Node(int first,int second,int third)
    {
        this.first=first;
        this.second=second;
        this.third=third;
    }
}
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int m=mat.length;
        int n=mat[0].length;
        int visited[][]=new int[m][n];
        int distance[][]=new int [m][n];
        Queue<Node> q=new LinkedList<Node>();
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(mat[i][j]==0)
                {
                    q.add(new Node(i,j,0));
                    visited[i][j]=1;
                }
                else
                {
                    visited[i][j]=0;
                }
            }
        }
        int delrow[]={-1,0,+1,0};
        int delcol[]={0,-1,0,+1};
        
        while(!q.isEmpty())
        {
            int row=q.peek().first;
            int col=q.peek().second;
            int step=q.peek().third;
            q.remove();
            distance[row][col]=step;

            for(int i=0;i<4;i++)
            {
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];

                if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && visited[nrow][ncol]==0 && mat[nrow][ncol]==1)
                {
                    q.add(new Node(nrow,ncol,step+1));
                    visited[nrow][ncol]=1;
                } 
            }
        }
        return distance;
    }
}
